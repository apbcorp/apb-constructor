<?php

namespace CoreBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * Class User
 * @package CoreBundle\Entity
 * @ORM\Entity
 * @ORM\Table(name="user")
 */
class User extends AutoGeneratedIdEntity implements UserInterface, \Serializable
{
    const SALT = 'akmjfmjgjpewnjg;wngdfesw;';

    /**
     * @var string
     * @ORM\Column(name="username", type="string", nullable=false)
     */
    private $username;

    /**
     * @var string
     * @ORM\Column(name="password", type="string", nullable=false)
     */
    private $password;

    /**
     * @var string
     * @ORM\Column(name="salt", type="string", nullable=false)
     */
    private $salt;

    /**
     * @var bool
     * @ORM\Column(name="is_developer", type="boolean", nullable=false)
     */
    private $isDeveloper;

    /**
     * @var bool
     * @ORM\Column(name="is_active", type="boolean", nullable=false)
     */
    private $isActive;

    /**
     * @var string
     * @ORM\Column(name="email", type="string", nullable=false)
     */
    private $email;

    /**
     * @var ArrayCollection
     * @ORM\ManyToMany(targetEntity="Role")
     * @ORM\JoinTable(name="user_role",
     *      joinColumns={@ORM\JoinColumn(name="user_id", referencedColumnName="id")},
     *      inverseJoinColumns={@ORM\JoinColumn(name="role_id", referencedColumnName="id")}
     *      )
     */
    private $roles;

    /**
     * @var ArrayCollection
     *
     * @ORM\OneToMany(targetEntity="UserPermission", mappedBy="id")
     */
    private $permissions;

    public function __construct()
    {
        $this->roles = new ArrayCollection();
        $this->permissions = new ArrayCollection();
    }

    public function getUsername() : string
    {
        return $this->username;
    }

    public function setUsername(string $username) : User
    {
        $this->username = $username;

        return $this;
    }

    public function getPassword() : string
    {
        return $this->password;
    }

    public function setPassword(string $password) : User
    {
        $this->password = $password;

        return $this;
    }

    public function getSalt() : string
    {
        return $this->salt;
    }

    public function setSalt(string $salt) : User
    {
        $this->salt = $salt;

        return $this;
    }

    public function isDeveloper() : bool
    {
        return $this->isDeveloper;
    }

    public function setIsDeveloper(bool $isDeveloper) : User
    {
        $this->isDeveloper = $isDeveloper;

        return $this;
    }

    public function isActive() : bool
    {
        return $this->isActive;
    }

    public function setIsActive(bool $isActive) : User
    {
        $this->isActive = $isActive;

        return $this;
    }

    public function getMail() : string
    {
        return $this->email;
    }

    public function setMail(string $mail) : User
    {
        $this->email = $mail;

        return $this;
    }
    
    public function getRoles() : ArrayCollection
    {
        return $this->roles;
    }
    
    public function addRole(Role $role) : User
    {
        $this->roles->add($role);

        return $this;
    }

    public function setRoles(ArrayCollection $roles) : User
    {
        $this->roles = $roles;

        return $this;
    }

    public function getPermissions() : ArrayCollection
    {
        return $this->permissions;
    }

    public function eraseCredentials() : void
    {

    }

    public function serialize() : string
    {
        return serialize([$this->id, $this->username, $this->password, $this->salt]);
    }

    public function unserialize($serialized)
    {
        list($this->id, $this->username, $this->password, $this->salt) = $this->unserialize($serialized);
    }
}